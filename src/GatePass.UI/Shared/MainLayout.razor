@using MudBlazor.ThemeManager
@using System.Security.Claims
@inherits LayoutComponentBase
@implements IDisposable

<MudThemeProvider Theme="_themeManager.Theme" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <AuthorizeView>
        <NotAuthorized>
            <MudContainer MaxWidth="MaxWidth.Small" Class="d-flex align-center" Style="height: 100vh;">
                <div class="d-flex flex-column mud-width-full">
                    <MudPaper Elevation="25" Class="pa-8" Width="100%" MaxWidth="500px">
                        <MudIcon Icon="@Icons.Custom.Brands.MudBlazor" Size="Size.Large" Style="width:100px; height:100px;" />
                        @Body
                    </MudPaper>
                    <MudAlert Severity="MudBlazor.Severity.Info" Class="mt-8 mud-width-full" Style="max-width:500px;">Authentication is required, click <MudLink Href="/">sign in</MudLink></MudAlert>
                </div>
            </MudContainer>
        </NotAuthorized>

        <Authorized>
            <MudAppBar Elevation="_themeManager.AppBarElevation">
                <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
                <MudSpacer />

                <UserMenu UserProfile="_profileService.Profile" />
            </MudAppBar>

            <MudDrawer @bind-Open="_drawerOpen" ClipMode="_themeManager.DrawerClipMode" Elevation="_themeManager.DrawerElevation">
                <MudDrawerHeader Style="background: white" Class="d-flex flex-row align-center">
                    <MudImage Src="logo.png" Width="42" Height="42" Alt="Logo" Style="margin-right: 0.75rem" />
                    <MudText Typo="Typo.h5">Gate Pass</MudText>
                </MudDrawerHeader>
                <MudDivider />
                <NavMenu/>
            </MudDrawer>

            <MudMainContent>
                <MudContainer MaxWidth="MaxWidth.Large" Class="my-4">
                    @Body
                </MudContainer>
            </MudMainContent>

            <MudThemeManagerButton OnClick="@((e) => OpenThemeManager(true))" />
            <MudThemeManager Open="_themeManagerOpen" OpenChanged="OpenThemeManager" Theme="_themeManager" ThemeChanged="UpdateTheme" />

        </Authorized>
    </AuthorizeView>
</MudLayout>

@code {
    bool _drawerOpen = true;
    public bool _themeManagerOpen = false;

    private ThemeManagerTheme _themeManager = new ThemeManagerTheme();

    [Inject]
    private ProfileService _profileService { get; set; } = default!;
    [Inject]
    private AuthenticationStateProvider _authenticationStateProvider { get; set; } = default!;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    void OpenThemeManager(bool value)
    {
        _themeManagerOpen = value;
    }

    void UpdateTheme(ThemeManagerTheme value)
    {
        _themeManager = value;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        _profileService.OnChange += _profileService_OnChange;
        _authenticationStateProvider.AuthenticationStateChanged += _authenticationStateProvider_AuthenticationStateChanged;
    }

    private void _profileService_OnChange()
    {
        InvokeAsync(() => StateHasChanged());
    }

    private void _authenticationStateProvider_AuthenticationStateChanged(Task<AuthenticationState> authenticationState)
    {
        InvokeAsync(async () =>
        {
            var state = await authenticationState;
            if (state.User.Identity != null && state.User.Identity.IsAuthenticated)
            {
                await _profileService.Set(state.User);
            }
        });
    }

    public void Dispose()
    {
        _profileService.OnChange -= _profileService_OnChange;
        _authenticationStateProvider.AuthenticationStateChanged -= _authenticationStateProvider_AuthenticationStateChanged;
    }
}