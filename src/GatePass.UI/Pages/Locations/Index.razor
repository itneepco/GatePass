@page "/locations"
@attribute [Authorize(Roles = "Admin")]

@inject IRepository<Location> _repository;

<HeroTitle Title="Locations" Description="Manage Locations" />

<MudTable Items="@Locations" 
          Hover="true"
          FixedHeader="true"
          Filter="new Func<Location, bool>(FilterLocation)">

    <ToolBarContent>
        <MudButton OnClick="() => AddLocation()" Variant="Variant.Filled" Color="Color.Primary">Add Location</MudButton>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Variant="Variant.Outlined" Margin="Margin.Dense" />
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh Style="width:30%">Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Location">@context.Name</MudTd>
        <MudTd DataLabel="Actions">
            <MudMenu Label="Actions" Variant="Variant.Filled" DisableElevation="true" EndIcon="@Icons.Material.Filled.KeyboardArrowDown" IconColor="Color.Secondary">
                <MudMenuItem OnClick="() => EditLocation(context)" >Edit</MudMenuItem>
            </MudMenu>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private string searchString = "";

    private IEnumerable<Location> Locations = new List<Location>();

    protected override async Task OnInitializedAsync()
    {
        await ReloadLocations();
    }

    private async Task ReloadLocations() {
        Locations = await _repository.ListAsync();
    }

    private bool FilterLocation(Location location) => FilterFunc(location, searchString);

    private bool FilterFunc(Location location, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (location.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private async Task AddLocation() {
        var options = new DialogOptions()
            {
                DisableBackdropClick = true,
                Position = DialogPosition.TopCenter,
                FullWidth = true,
                MaxWidth = MaxWidth.Small
            };

        var dialog = _dialog.Show<LocationFormModal>("Create New Location", options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await ReloadLocations();
        }
    }

    private async Task EditLocation(Location location)
    {
        var options = new DialogOptions()
            {
                DisableBackdropClick = true,
                Position = DialogPosition.TopCenter,
                FullWidth = true,
                MaxWidth = MaxWidth.Small
            };
        
        var parameters = new DialogParameters();
        parameters.Add("Location", location);

        var dialog = _dialog.Show<LocationFormModal>("Update Location", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await ReloadLocations();
        }
    }
}
