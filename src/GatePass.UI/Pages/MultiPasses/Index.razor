@page "/multipass"
@attribute [Authorize]

@using GatePass.Core.PassAggregate.Specifications
@using System.Security.Claims
@using GatePass.UI.Extensions
@inject IReadRepository<MultiplePass> _repo;

<HeroTitle Title="Multiple Pass" Description="Manage Multi Day Pass" />

<MudTable ServerData="@(new Func<TableState, Task<TableData<MultiplePass>>>(ReloadMultiplePasses))"
          @ref="table"
          @bind-CurrentPage="pageIndex"
          Hover="true">
    <ToolBarContent>
        <MudButton OnClick="() => AddMultiPass()" Variant="Variant.Filled" Color="Color.Primary">Add Pass</MudButton>
        <MudSpacer />
        <MudTextField @bind-Value="searchString"
                      Placeholder="Search by visitor name, phone no or department"
                      Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      IconSize="Size.Medium"
                      Variant="Variant.Outlined" 
                      Margin="Margin.Dense" />
        <MudButton OnClick="@SearchVisitors"
                   Variant="Variant.Filled"
                   Class="ml-2"
                   Color="Color.Secondary">Search</MudButton>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Visitor Photo</MudTh>
        <MudTh>Visitor Name</MudTh>
        <MudTh>From Date</MudTh>
        <MudTh>Till Date</MudTh>
        <MudTh>Department</MudTh>
        <MudTh>Purpose</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Visitor Photo">
            <MudImage Fluid="true" Width="80" Height="60"
                      Src="@GetPhotoUrl(context.Visitor?.PhotoName)"
                      Class="rounded-lg" />
        </MudTd>
        <MudTd DataLabel="Visitor Name">
            <span>@context.Visitor?.FirstName @context.Visitor?.LastName</span>
        </MudTd>
        <MudTd DataLabel="From Date">@context.FromDate.ToShortDateString()</MudTd>
        <MudTd DataLabel="Till Date">@context.TillDate.ToShortDateString()</MudTd>
        <MudTd DataLabel="Department">@context.Department</MudTd>
        <MudTd DataLabel="Purpose">@context.Purpose</MudTd>
        <MudTd DataLabel="Actions">
            <MultiPassAction MultiPass="@context" OnPassUpdate="ReloadTable" />
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    int pageIndex;
    MudTable<MultiplePass>? table;
    string searchString = string.Empty;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; } = default!;
    ClaimsPrincipal currentUser = default!;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        currentUser = authState.User;
    }

    async Task<TableData<MultiplePass>> ReloadMultiplePasses(TableState state)
    {
        List<MultiplePass> multiPasses = new();

        if (currentUser.IsInRole("Admin"))
        { //fetch all visitors
            var spec = new MultiPassWithVisitorPaginationSpec(state.Page, state.PageSize, searchString);
            multiPasses = await _repo.ListAsync(spec);
        }
        else //fetch visitors based on locationId
        {
            var spec = new MultiPassWithVisitorByLocationIdPaginationSpec(currentUser.GetLocationId(), state.Page, state.PageSize, searchString);
            multiPasses = await _repo.ListAsync(spec);
        }
        var totalCount = await _repo.CountAsync();

        return new TableData<MultiplePass>() { 
            TotalItems = totalCount, 
            Items = multiPasses
        };
    }

    void SearchVisitors()
    {
        pageIndex = 0;

        ReloadTable();
    }

    void AddMultiPass()
    {
        var options = new DialogOptions()
            {
                DisableBackdropClick = true,
                Position = DialogPosition.TopCenter,
                FullWidth = true,
                MaxWidth = MaxWidth.Small
            };

        var dialog = _dialog.Show<SearchVisitor>("Search Visitor by Phone", options);
    }

    void ReloadTable()
    {
        table?.ReloadServerData();
    }

    string GetPhotoUrl(string? photoName)
    {
        if (String.IsNullOrEmpty(photoName))
        {
            return "photos/placeholder.jpg";
        }

        return $"photos/{photoName}";
    }
}
