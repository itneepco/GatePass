@page "/locations"

@inject IRepository<Location> _repository;

<HeroTitle Title="Locations" Description="Manage Locations" />

<MudTable Items="@Locations" 
          Hover="true"
          FixedHeader="true"
          Filter="new Func<Location, bool>(FilterLocation)">

    <ToolBarContent>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh Style="width:30%">Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Location">@context.Name</MudTd>
        <MudTd DataLabel="Actions">
            <MudMenu Label="Actions" Variant="Variant.Filled" DisableElevation="true" EndIcon="@Icons.Filled.KeyboardArrowDown" IconColor="Color.Secondary">
                <MudMenuItem>Edit</MudMenuItem>
                <MudMenuItem>Delete</MudMenuItem>
            </MudMenu>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private string searchString = "";

    private IEnumerable<Location> Locations = new List<Location>();

    protected override async Task OnInitializedAsync()
    {
        Locations = await _repository.ListAsync();
    }

    private bool FilterLocation(Location location) => FilterFunc(location, searchString);

    private bool FilterFunc(Location location, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (location.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}
